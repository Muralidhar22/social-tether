// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String     @id @default(cuid())
  content   String?
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  comments  Comment[]
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  likes     Like[]
  Bookmark  Bookmark[]
}

model Like {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id     String @id @default(cuid())
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
}

model UserFollow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id])
  following   User   @relation("Followed", fields: [followingId], references: [id])
}

model User {
  id            String       @id @default(cuid())
  username      String?      @unique
  email         String       @unique
  image         String?
  name          String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  password      String?
  followers     UserFollow[] @relation("Followed")
  following     UserFollow[] @relation("Following")
  Comment       Comment[]
  bio           String?
  likes         Like[]

  @@unique([username, email])
}
